export interface VhPrinterAndroidPosUsbPlugin {
  echo(options: { value: string }): Promise<{ value: string }>;
  connectUSB(options: { pathName: string }): Promise<void>;
  connectNet(options: { ipAddress: string }): Promise<void>;
  connectBt(options: { macAddress: string }): Promise<void>;
  connectMAC(options: { macAddress: string }): Promise<void>;
  connectSerial(options: { port: string, boudrate: string }): Promise<void>;
  printText(options: { text: string }): Promise<void>;
  printBarcode(options: { data: string, symbology?: number, width?: number, height?: number, alignment?: number }): Promise<void>;
  printQRCode(options: { content: string, moduleSize?: number, ecLevel?: number, alignment?: number, pageWidth?: number }): Promise<void>;
  printPicCode(options: { image: string, width?: number, feedLines?: number }): Promise<void>;
  getPrinterStatus(): Promise<{ status: number }>;
  openCashBox(options: { pin: number }): Promise<void>;
  printTable(options: { table: any }): Promise<void>;
  cpclGetPrinterStatus(): Promise<{ status: string }>;
  searchUsb(): Promise<{ devices: string[] }>;
  exit(): Promise<void>;
  getAppCtx(): Promise<{ context: string }>;
  getUsbDevice(): Promise<{ devices: string[] }>;
  getSerialPort(): Promise<{ ports: string[] }>;
  getCopyRight(): Promise<{ copyRight: string }>;
  searchNetDevice(): Promise<{ devices: any[] }>;
  udpNetConfig(options: { macAddress: string, ipAddress: string, mask: string, gateway: string, dhcp: boolean }): Promise<void>;
  feedDot(options: { dotCount: number }): Promise<void>;
  cutPaper(options: { model: number }): Promise<void>;
  cutHalfAndFeed(options: { distance: number }): Promise<void>;
  setPrintArea(options: { x: number, y: number, width: number, height: number }): Promise<void>;
  setPageModel(options: { isOpen: boolean }): Promise<void>;
  setPrintDirection(options: { direction: number }): Promise<void>;
  setAbsoluteHorizontal(options: { position: number }): Promise<void>;
  setRelativeHorizontal(options: { position: number }): Promise<void>;
  setAbsoluteVertical(options: { position: number }): Promise<void>;
  setRelativeVertical(options: { position: number }): Promise<void>;
  setTextStyle(options: { attribute: number, textSize: number }): Promise<void>;
  setAlignment(options: { alignment: number }): Promise<void>;
  downloadNVImage(options: { imagePaths: string, imageWidth: number }): Promise<void>;
  clearNVImage(): Promise<void>;
  printNVImage(options: { index: number, model: number }): Promise<void>;
  initializePrinter(): Promise<void>;
  setLineSpacing(options: { space: number }): Promise<void>;
  setTurnUpsideDownMode(options: { on: boolean }): Promise<void>;
  selectCodePage(options: { page: number }): Promise<void>;
  selectCharacterFont(options: { font: number }): Promise<void>;
  setCharRightSpace(options: { space: number }): Promise<void>;
  openOrCloseAutoReturnPrintState(options: { info: number }): Promise<void>;
  wifiConfig(options: { ip: string, mask: string, gateway: string, ssid: string, password: string, encrypt: number }): Promise<void>;
  setIp(options: { ip: string }): Promise<void>;
  setMask(options: { mask: string }): Promise<void>;
  setGateway(options: { gateway: string }): Promise<void>;
  setNetAll(options: { ip: string, mask: string, gateway: string, dhcpIsOpen: boolean }): Promise<void>;
  setBluetooth(options: { name: string, pin: string }): Promise<void>;
  getSerialNumber(): Promise<{ serialNumber: string }>;
}
