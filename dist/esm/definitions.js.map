{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["export interface VhPrinterAndroidPosUsbPlugin {\n  echo(options: { value: string }): Promise<{ value: string }>;\n  connectUSB(options: { pathName: string }): Promise<void>;\n  connectNet(options: { ipAddress: string }): Promise<void>;\n  connectBt(options: { macAddress: string }): Promise<void>;\n  connectMAC(options: { macAddress: string }): Promise<void>;\n  connectSerial(options: { port: string, boudrate: string }): Promise<void>;\n  printText(options: { text: string }): Promise<void>;\n  printBarcode(options: { data: string, symbology?: number, width?: number, height?: number, alignment?: number }): Promise<void>;\n  printQRCode(options: { content: string, moduleSize?: number, ecLevel?: number, alignment?: number, pageWidth?: number }): Promise<void>;\n  printPicCode(options: { image: string, width?: number, feedLines?: number }): Promise<void>;\n  getPrinterStatus(): Promise<{ status: number }>;\n  openCashBox(options: { pin: number }): Promise<void>;\n  printTable(options: { table: any }): Promise<void>;\n  cpclGetPrinterStatus(): Promise<{ status: string }>;\n  searchUsb(): Promise<{ devices: string[] }>;\n  exit(): Promise<void>;\n  getAppCtx(): Promise<{ context: string }>;\n  getUsbDevice(): Promise<{ devices: string[] }>;\n  getSerialPort(): Promise<{ ports: string[] }>;\n  getCopyRight(): Promise<{ copyRight: string }>;\n  searchNetDevice(): Promise<{ devices: any[] }>;\n  udpNetConfig(options: { macAddress: string, ipAddress: string, mask: string, gateway: string, dhcp: boolean }): Promise<void>;\n  feedDot(options: { dotCount: number }): Promise<void>;\n  cutPaper(options: { model: number }): Promise<void>;\n  cutHalfAndFeed(options: { distance: number }): Promise<void>;\n  setPrintArea(options: { x: number, y: number, width: number, height: number }): Promise<void>;\n  setPageModel(options: { isOpen: boolean }): Promise<void>;\n  setPrintDirection(options: { direction: number }): Promise<void>;\n  setAbsoluteHorizontal(options: { position: number }): Promise<void>;\n  setRelativeHorizontal(options: { position: number }): Promise<void>;\n  setAbsoluteVertical(options: { position: number }): Promise<void>;\n  setRelativeVertical(options: { position: number }): Promise<void>;\n  setTextStyle(options: { attribute: number, textSize: number }): Promise<void>;\n  setAlignment(options: { alignment: number }): Promise<void>;\n  downloadNVImage(options: { imagePaths: string, imageWidth: number }): Promise<void>;\n  clearNVImage(): Promise<void>;\n  printNVImage(options: { index: number, model: number }): Promise<void>;\n  initializePrinter(): Promise<void>;\n  setLineSpacing(options: { space: number }): Promise<void>;\n  setTurnUpsideDownMode(options: { on: boolean }): Promise<void>;\n  selectCodePage(options: { page: number }): Promise<void>;\n  selectCharacterFont(options: { font: number }): Promise<void>;\n  setCharRightSpace(options: { space: number }): Promise<void>;\n  openOrCloseAutoReturnPrintState(options: { info: number }): Promise<void>;\n  wifiConfig(options: { ip: string, mask: string, gateway: string, ssid: string, password: string, encrypt: number }): Promise<void>;\n  setIp(options: { ip: string }): Promise<void>;\n  setMask(options: { mask: string }): Promise<void>;\n  setGateway(options: { gateway: string }): Promise<void>;\n  setNetAll(options: { ip: string, mask: string, gateway: string, dhcpIsOpen: boolean }): Promise<void>;\n  setBluetooth(options: { name: string, pin: string }): Promise<void>;\n  getSerialNumber(): Promise<{ serialNumber: string }>;\n}\n"]}